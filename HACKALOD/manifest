#!/exlibris/aleph/a20_1/product/bin/perl

use strict;
use CGI qw(:standard :cgi-lib);

use CGI::Carp qw(fatalsToBrowser);
use Net::LDAPS qw(:all);
use Net::LDAP::Util;
use LWP::UserAgent;
use URI::Escape;
use lib '.';
use XMLHash qw/parsexmlstring xml_string hash_for_path text_for_path array_for_path string_for_path/;

my $query = new CGI;
my %args = $query->Vars();
my $ipath = lc $ENV{PATH_INFO};

print header(-type=>"application/ld+json",
             -charset=>'utf-8',
             -access_control_allow_origin => '*',
             -expires=>'1s');

my $q = $args{'q'};
my $s = $args{'s'};
#$q = 'bloeme';
#$s = 'BYVANCKB:mimi_76e4:003r';

if ($q && $s) {
  my @s = split /,/, $s;
  my %s = map { $_ => 1 } @s;
  my %bs = map { s{:\d+:image}{}; $_ => 1 } @s;

  my $sparql =<<"SPARQL";
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX foafX: <http://xmlns.com/foaf/>

SELECT ?book ?title ?depiction
FROM NAMED <http://lod.kb.nl/edbo/>
FROM NAMED <http://lod.kb.nl/byvanck/>
WHERE
{
  {GRAPH <http://lod.kb.nl/edbo/>
  {
    ?book rdfs:label ?title; a kbo:Boek; foafX:depiction ?depiction.

       FILTER regex(?title, "$q", "i")
  } } UNION {
  GRAPH <http://lod.kb.nl/byvanck/>
  {
      ?book rdfs:label ?title; foafX:depiction ?depiction.

       FILTER regex(?title, "$q", "i")
  } }
}
ORDER BY ?title
LIMIT 20

SPARQL
  my $datasetname = 'http://lod.kb.nl/edbo/';
  my $url = 'http://lod.kb.nl/sparql?default-graph-uri=';
  $url .= uri_escape($datasetname);
  $url .= '&query=';
  $url .= uri_escape($sparql);
  $url .= '&format=' . uri_escape('application/sparql-results+xml');
  $url .= '&timeout=180000&debug=on';

  my $ua = LWP::UserAgent->new;
  $ua->timeout(10);
  $ua->env_proxy;

  my $response = $ua->get($url);

  my $done = {};
  my $xml = $response->content;
  my $data = parsexmlstring($xml);
  my @jsonpages;

  my $results = array_for_path($data, 'sparql/results/result');
  foreach my $result (@$results) {
    eval {
      my $bookuri = text_for_path($result, 'binding[name="book"]/uri');
      my $title = text_for_path($result, 'binding[name="title"]/literal');
      my $depiction = text_for_path($result, 'binding[name="depiction"]/uri');
      my ($bookid) = $depiction =~ m{urn=([^&]+)};

      if (not $bs{$bookid}) {
        next;
      }

    if ($bookid =~ m{BYVANCKB}) {
      my $datasetname = 'http://lod.kb.nl/byvanck/';
      $bookid = 'http://resolver.kb.nl/resolve?urn=' . $bookid;
      my $sparql =<<"SPARQL";
    PREFIX dcterms: <http://purl.org/dc/terms/>
    PREFIX foafX: <http://xmlns.com/foaf/>

    SELECT ?depiction
    WHERE
    {
	  ?bookid foafX:depiction <$bookid> .
	  ?bookid foafX:depiction ?depiction.
    }
SPARQL
      my $url = 'http://lod.kb.nl/sparql?default-graph-uri=';
      $url .= uri_escape($datasetname);
      $url .= '&query=';
      $url .= uri_escape($sparql);
      $url .= '&format=' . uri_escape('application/sparql-results+xml');
      $url .= '&timeout=180000&debug=on';

      my $ua = LWP::UserAgent->new;
      $ua->timeout(10);
      $ua->env_proxy;

      my $response = $ua->get($url);

      my $xml = $response->content;
      my $data = parsexmlstring($xml);

      my $results = array_for_path($data, 'sparql/results/result');
      foreach my $result (@$results) {
	eval {
	  my $depiction = text_for_path($result, 'binding[name="depiction"]/uri');
	  my ($pageid, $pagetitle) = $depiction =~ m{urn=(.+:([^:]+))$};
        if ($pagetitle && $pageid && $s{$pageid}) {
          if ($done->{$pageid}) {
            next;
          }
          $done->{$pageid} = 1; 
          $pagetitle =~ s{"}{&quot;}g;
          $pagetitle =~ s{\s+$}{}g;
          my $json = <<"EOJSPAGE";
        {
          "label": "$pagetitle",
          "width": 3435,
          "\@type": "sc:Canvas",
          "images": [
            {
              "resource": {
                "service": {
                  "profile": "http://iiif.io/api/image/2/level2.json",
                  "\@id": "http://imageserver:8182/iiif/2/$pageid"
                },
                "format": "image/jpeg",
                "\@id": "http://imageserver:8182/iiif/2/$pageid/full/full/0/default.jpg",
                "\@type": "dctypes:Image"
              },
              "on": "http://imageserver/iiif/dpo:5093:mpeg21/canvas/$pageid.json",
              "motivation": "sc:painting",
              "\@id": "http://imageserver/iiif/dpo:5093:mpeg21/canvas/$pageid/anno1.json",
              "\@type": "oa:Annotation"
            }
          ],
          "height": 4216,
          "\@id": "http://imageserver/iiif/dpo:5093:mpeg21/canvas/$pageid.json",
          "thumbnail": {
            "\@id": "http://imageserver:8182/iiif/2/$pageid/full/150,/0/default.jpg"
          }
        }
EOJSPAGE
          push @jsonpages, $json;
          }

	};
	if ($@) {

	}
      }
    }
    else {
      my $oaiid = "DPO:$bookid";

      my $oaiurl = "http://services.kb.nl/mdo/oai?";
      $oaiurl .= "verb=GetRecord";
      $oaiurl .= "&metadataPrefix=didl";
      $oaiurl .= "&identifier=$oaiid";

      my $ua = LWP::UserAgent->new;
      $ua->timeout(10);
      $ua->env_proxy;

      my $response = $ua->get($oaiurl);

      my $xml = $response->content;
      $xml =~ s{(=\s*"[^"]+)[\n\r]+\s*([^"]+")}{$1 $2}g;

      my $data = parsexmlstring($xml);

      my $p = 'OAI-PMH/GetRecord/record/metadata/didl:DIDL/didl:Item[0]';
      my $didlitem = hash_for_path($data, $p);
      my $pageitems = array_for_path($didlitem, 'didl:Item');
      foreach my $pageitem (@$pageitems) {
	my $pagetitle = '';
	my $pageid = '';
	my $descriptors = array_for_path($pageitem, 'didl:Descriptor');
	foreach my $desc (@$descriptors) {
	  my $pt = text_for_path($desc, 'didl:Statement');
	  if ($pt) {
	    $pagetitle .= $pt . ' ';
	  }
	}
	my $comps = array_for_path($pageitem, 'didl:Component');
	foreach my $comp (@$comps) {
	  my $comptype = text_for_path($comp, 'didl:Descriptor/didl:Statement');
	  if ($comptype eq 'image') {
	    my $resource = hash_for_path($comp, 'didl:Resource');
	    if ($resource->{'@mimeType'} eq 'image/jp2') {
	      ($pageid) = $resource->{'@ref'} =~ m{urn=(.+)};
	    }
	  }
	}
	if ($pagetitle && $pageid && $s{$pageid}) {
	  $pagetitle =~ s{"}{&quot;}g;
	  $pagetitle =~ s{\s+$}{}g;
          my $json = <<"EOJSPAGE";
        {
          "label": "$pagetitle",
          "width": 3435,
          "\@type": "sc:Canvas",
          "images": [
            {
              "resource": {
                "service": {
                  "profile": "http://iiif.io/api/image/2/level2.json",
                  "\@id": "http://imageserver:8182/iiif/2/$pageid"
                },
                "format": "image/jpeg",
                "\@id": "http://imageserver:8182/iiif/2/$pageid/full/full/0/default.jpg",
                "\@type": "dctypes:Image"
              },
              "on": "http://imageserver/iiif/dpo:5093:mpeg21/canvas/$pageid.json",
              "motivation": "sc:painting",
              "\@id": "http://imageserver/iiif/dpo:5093:mpeg21/canvas/$pageid/anno1.json",
              "\@type": "oa:Annotation"
            }
          ],
          "height": 4216,
          "\@id": "http://imageserver/iiif/dpo:5093:mpeg21/canvas/$pageid.json",
          "thumbnail": {
            "\@id": "http://imageserver:8182/iiif/2/$pageid/full/150,/0/default.jpg"
          }
        }
EOJSPAGE
          push @jsonpages, $json;
          }
	}
      }
    };
    if ($@) {
      print $@;
    }
  }
  local $" = ",";
  my $jsonpages = "@jsonpages";

  print <<"EOJS";
{
  "attribution": "Gehackt door de UB Leiden",
  "sequences": [
    {
      "canvases": [
        $jsonpages
      ],
      "viewingDirection": "left-to-right",
      "\@id": "http://imageserver/iiif/dpo:5093:mpeg21/sequence1.json",
      "\@type": "sc:Sequence",
      "viewingHint": "paged"
    }
  ],
  "label": "Pages with pictures while searching for $q",
  "\@context": "http://iiif.io/api/presentation/2/context.json",
  "\@id": "http://imageserver/iiif/dpo:5093:mpeg21",
  "\@type": "sc:Manifest"
}
EOJS

}
